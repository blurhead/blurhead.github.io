#%% Change working directory from the workspace root to the ipynb file location. Turn this addition off with the DataScience.changeDirOnImportExport setting
# ms-python.python added
import os
try:
	os.chdir(os.path.join(os.getcwd(), 'posts'))
	print(os.getcwd())
except:
	pass
#%% [markdown]
# 本文旨在介绍python中io库的使用
# 
#%% [markdown]
# 看完本文, 希望你能够回答以下问题.
# 
# 1. 如何优雅的读写文件
#     - 用上下文管理器管理文件资源
# 2. 如何优化读写速度
#     - 操作文件指针
#     - 使用进程/线程锁确保数据一致性
#     - 1
#     - 2
# 
#%% [markdown]
# python 中有三种I/O, 分别是text I/O, binary I/O, raw I/O,  
# 属于任意一种类型所对应的的对象都叫做file object, 也叫做stream, file-like object.
# 
#%% [markdown]
# 创建一个file object的通用方法是用open函数, 可以用来创建text I/O和binary I/O.  
# open函数的参数mode代表对文件操作的类型,
# 按照文件内容有二进制和纯文本, 按照操作类型可以分为以下几种, 以下摘自官方文档
# 
# - 'r'    open for reading (default)  
# - 'w'    open for writing, truncating the file first  
# - 'x'    create a new file and open it for writing  
# - 'a'    open for writing, appending to the end of the file if it exists  
# - 'b'    binary mode  
# - 't'    text mode (default)  
# - '+'    open a disk file for updating (reading and writing)  
# - 'U'    universal newline mode (deprecated)  
# 
#%% [markdown]
# Text I/O
# ==
# 

#%%
import io

# create a text stream
file1 = open('myfile.txt', 'r', encoding='utf8')

# create a in memory text stream
file2 = io.StringIO('texts stored in memory')

isinstance(file1, io.TextIOBase), isinstance(file2, io.TextIOBase)

#%% [markdown]
# text stream对象的基类是TextIoBase
# 
# 
#%% [markdown]
# 读写文件的流程, 打开文件 -> 文件操作 -> 关闭文件
# 下面是一个简单的例子
# 

#%%
get_ipython().run_cell_magic('time', '', "f = open('text.txt', 'w', newline='\\n', )\nprint(f.write('hello world'))\nprint(f.write('hello world'))\nf.close()\n")


